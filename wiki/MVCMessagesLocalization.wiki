#summary JCatapult MVC Messages and Localization

= Messages =

Messages in the JCatapult MVC are handled differently than most MVCs. Some MVCs use interfaces or sub-classes to manage messages generated by an action. Others use member variables to manage actions. Since the JCatapult MVC relies heavily on dependency injection, we decided to use an injectable interface to managing messages. This message is named `org.jcatapult.mvc.message.MessageStore` and it can be injected into any action. Here is an example:

{{{
@Action
public class CoolAction {
  private final MessageStore messageStore;

  @Inject
  public CoolAction(MessageStore messageStore) {
    this.messageStore = messageStore;
  }

  ...
}
}}}

The `MessageStore` interface defines a number of methods for adding field and action messages and errors. Each method takes a message key, message scope and a set of values. Some of the methods take a bundle name and a field name as well. Here are the parameters and their meaning:

  * key - The key used to look up the message
  * scope - The scope to place the message into (discussed later)
  * values - Used to format the message using the java.text.MessageFormat class
  * bundle - An alternative bundle to use. The default bundle name for methods that don't take a bundle parameter is the full class name of the current action
  * field - The name of the field, used when setting field messages

= Message Provider =

The default implementation of the `MessageStore` interface uses the `org.jcatapult.l10n.MessageProvider` from the JCatapult-Core library to locate the messages. The default implementation of the `MessageProvider` interface uses ResourceBundles to look up messages. It adds an additional search behavior to the standard ResourceBundle handling.

This is best illustrated using an example. Let's say the current Locale is *en_US* and the current action class is *org.example.action.ExampleAction*. The search order is as follows:

  # org.example.action.ExampleAction_en_US
  # org.example.action.ExampleAction_en
  # org.example.action.ExampleAction
  # org.example.action.package_en_US
  # org.example.action.package_en
  # org.example.action.package
  # org.example.package_en_US
  # org.example.package_en
  # org.example.package
  # org.package_en_US
  # org.package_en
  # org.package
  # package_en_US
  # package_en
  # package

This search order allows messages to be easily localized to any Locale. The Locale used for this process is retrieved using the [MVCLocale LocaleStore] mechanism.

= Scopes =

Scopes allows messages to be placed in places other than the HttpServletRequest, which is the default handling for some other MVCs. Storing all messages in the request has a number of short-comings. The most common issue with request storage is that all of the messages are lost during a redirect. It is also very difficult to set global messages that you want displayed to all users or messages that should be displayed to specific users.

JCatapult MVC message handling allows you to set messages into any of these scopes:

  * Request
  * Session
  * Application (a.k.a. Context)
  * Flash
  * ActionSession

The first three of these scopes are the standard JEE scopes. The last two scopes are special JCatapult MVC Scopes.

The *Flash* scope provides a mechanism that allows a message to be stored so that it is only accessible during the next request. Any subsequent request will not have access to a previously Flashed messages. This is performed using a special location in the Session scope and then transferring the any flashed messages from this location to the Request scope at the start of each request. This allows message to be accessible across a redirect, but only accessible once. That way they don't show up every time you visit a page.

The *ActionSession* scope provides an safety mechanism on top of the Session scope. Session scoped messages are accessible anywhere in the application via their name. ActionSession messages are stored in the Session scope so that they are accessible across requests, but they are only accessible to a specific action.
