#summary Database Management Guide

= Database Management =

JCatapult has a robust set of tools that allow you to manage project databases. Since JCatapult is also highly componentized, it also provides the ability to manage all of the tables and data required by components. This support is called the JCatapult Database Management system.

During the course of development, components and web applications go through various stages with respect to the database. Like all other project assets, the database is a versioned resource that is used by the application. Therefore, it is important to be able to manage the database effectively as a versioned resource.

In order to understand how JCatapult allows you to accomplish this goal, we'll step through the standard life-cycle of a project starting with a web application. Later we will cover the same life-cycle for a component.

== Step 1: Project creation ==

The first step of any project is its creation. When JCatapult creates a project is creates a number of directories that are important when dealing with the database. These directories are:

  * src/java/main/<your-package>/domain
  * src/db/main

The first of these directories is where your projects entity classes are put. Entity classes are JPA annotated classes that map directly to database tables. 

The second of these directories is the location of the management scripts, which are used by JCatapult to version your databases.

== Step 2: Writing entities ==

After the project is created you will generally write the data model for the application. The data model is initially written in Java code using the JPA API. This reduces the overhead of getting started by not requiring you to write the entity classes and SQL scripts to create your database tables.

== Step 3: Creating initial development databases ==

JCatapult will use the entity classes that you have added to your project to create the database. At this stage you don't need to do anything special to get JCatapult to work. All you need to do to create your database tables is to execute the command:

{{{
ant create-main-database
}}}

This will create the database that is used by the application when it is run inside Tomcat for development testing. The name of the database is always the same as the name of your project as it is defined in the _project.xml_ file. The only thing that JCatapult does to this name is to replace dashes (-) with underscores (_). You can change the name of your database by setting a property in the _project.xml_ file named _project.database_ like this:

{{{
<property name="project.database" value="foo_bar"/>
}}}

== Step 4: Unit testing ==

JCatapult also manages a second database that is only used for unit testing. This database is always the name of your project, plus `_test` with the same transformation and overriding as mentioned above. For example, if your _project.xml_ file looks like this:

{{{
<project name="foo-bar"
  ...
}}}

JCatapult will name the test database:

{{{
foo_bar_test
}}}

If you want to create the test database without running the unit tests execute this command:

{{{
ant create-test-database
}}}

== Step 5: Seeding data ==

Most applications will need some amount of initial data put into tables prior to the application being deployed. This also holds true in development. In order to seed the tables of your application, you need to create seed files. 

Seed files are placed into the _src/db/main/seed_ directory. The seed files themselves are versioned and must match the version of the project. This means that if you project's current version is 1.0, you should put all of the seed data for that version into a file named something like:

{{{
1.0-seed-user-data.sql
}}}

The only part of the name that is required by JCatapult is the version. The rest can be anything you like.

Seed files should contain valid SQL insert, update and/or delete statements that setup the data in database so that it is usable by the application. These files should not change the database structure at all. We cover changing the structure later.

== Step 6: Releasing initial version ==

After you completed the initial version of the application and fully tested it, you will then want to release the initial version of the project to either the production or testing environment. This step is quite possibly the most complex step in all of JCatapult. This is due to how Hibernate currently converts your projects entity classes into an SQL table creation script. Before we get into the difficult part, let's look at how you create the projects initial table creation script. In order to convert the entity classes you have created so far into an SQL script, you must execute this command:

{{{
ant table-sql
}}}

This command creates or overrides the file located at _src/db/main/base/tables.sql_. *NOTE:* This script should only contain the initial state of your database and after your application has been released, it should never be edited or recreated. If you edit this file you will be in for some major headaches when attempting to migration your application from one environment to another.

=== The headache ===

One of the major headaches with JCatapult currently is how it uses Hibernate for script and database creation. JCatapult allow you to add components to a project easily. These components will generally have entity classes of their own. In order to correct add a component to a web application you will need to also add the entity classes for the component into the _src/conf/main/META-INF/persistence.xml_ file. When you run the `ant tables-sql` command, Hibernate generates a SQL script that creates tables for *ALL* entities defined in your project and in the persistence.xml file. This means that the _tables.sql_ file the `ant table-sql` command creates will contain entities not defined in you project, but that are defined in components. Furthermore, JCatapult is capable of managing entities in components automatically. 

Therefore, you will need to edit the _tables.sql_ file that is created and remove all of the table definitions for any components your application uses.

=== Immutable files ===

One last thing to mention about the release process is that after you perform a release all of the files in the _src/db/main_ directories (base, alter, seed) should *NOT* be edited. These become immutable and should not be touched again.

== Step 7: Next release ==

The next step in most applications life-cycle are updates. When updating an application you might need to make changes to the database.