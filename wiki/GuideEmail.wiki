= JCatapult Email Library (JCEL) =

Built on [http://freemarker.sourceforge.net/ FreeMarker] and [http://java.sun.com/products/javamail/ JavaMail], the JCatapult Email library (JCEL for short) provides a set of APIs to easily create and send emails from an application. JCEL is designed primarily around two main interface APIs:

  * Email Service - Builds the email
  * Email Transport Service - Sends the mail

= Email Service =

The Email Service is an interface that is used to construct emails in a simple and templatized manner.  The API itself consists of one method, `sendEmail`, the javadoc for which has been included below for illustration:

{{{
/**
 * Called to build the email using the specified template as the email body, configure the
 * email using the returned {@link EmailCommand} object and then send the email using the returned
 * {@link EmailCommand} object.
 *
 * Here's an example using the template below named 'hello':
 *
 * <pre>
 * Hello ${name},
 *
 * Thanks for buying all that cool stuff.
 * </pre>
 *
 * <p>
 * You would call this method like this:
 * </p>
 *
 * <pre>
 * sendEmail("hello").withTemplateParam("name", "Joe Blow").to("joe@blow.com").from("info@example.com").now(); 
 * </pre>
 *
 * @param   template (Required) The name of the template. The implementation will dictate the type
 *          of template and how they are stored.
 * @return  The name value pair chain.
 * @throws JCatapultEmailException Runtime exception thrown if the from and/or subject are null and also
 * if the email message contains zero recipients
 */
EmailCommand sendEmail(String template) throws JCatapultEmailException ;
}}}

== Email Command ==

As indicated above, the `sendEmail` method returns an instance of the `EmailCommand` interface. The `EmailCommand` interface provides a DSL (domain specific language) approach to constructing and sending emails. DSLs, such as the `EmailCommand`, are characterized by providing methods that sound like plain English. This allows the code to be more easily read. here is an example:

=== Example ===

You want to send an email to john@doe.com, from 'jane@doe.com' and right now.  Using the `EmailService` interface and the `EmailCommand` interface you would instruct the service to perform the operation like this:

{{{
sendEmail("hello").to("john@doe.com").from("jane@doe.com").now();
}}}

== FreeMarker Email Service ==

As suggested by the name, the `FreeMarkerEmailService` is an implementation of the `EmailService` that uses the FreeMarker templating engine to build the body of the emails.

=== Configuration ===

The `FreemarkerEmailService` uses [GuideConfiguration JCatapult Configuration] for configuring both the FreeMarker Template and Email processing behaviour. There are a number of configuration parameters that can be specified to control the behavior of how the `FreeMarkerEmailService` processes templates. Specifically, these include:

  * jcatapult.email.templates.location:
    * Description: The location within the web application or a fully qualified location on disk of the FreeMarker email templates. The default value for the location of the email template files is configured using the [JCatapultProperties JCatapult properties] files.
    * Optional: Yes
    * default value: /WEB-INF/email
  
  * jcatapult.email.templates.cache
    * Description: A boolean that determines if the email templates should be cached by FreeMarker.
    * Optional: Yes
    * Default: false
  
  * jcatapult.email.templates.check-interval
    * Description: The number of seconds to check if the FreeMarker template has been modified. If caching is turned off this value is ignored.
    * Optional: Yes
    * Default: 2 if caching

To override the defaults, you would include these in your webapp's configuration files.  An example has been provided below for illustration purposes:

{{{
<config>
  <jcatapult>
    <email>
      <templates>
        <location>/WEB-INF/email-templates</location>
        <cache>true</cache>
        <check-interval>3600</check-interval>
      </templates>
    </email>
  </jcatapult>
</config>
}}}

The above example configures the `FreeMarkerEmailService` to load the email templates from the directory location `/WEB-INF/email-templates` and cache the templates in memory for 1 hour (3600 seconds).

=== Template Naming ===

In order for the `FreeMarkerEmailService` to actually find your files in the configured location, the files must conform to the following naming convention format:

{{{
<template-name>-[html|text].ftl
}}}

  * template-name: arbitrary name given to the template (e.g. contact).
  * [html|text]: html or text.  This token informs the service that the email message is a text or html email.

ex:
{{{
contact-text.ftl
contact-html.ftl
}}}

You can provide either of these two templates or both of the templates. If you only provide one of the two templates, the template will be rendered and then set into the `Email` instance as either the text body, if the `-text.ftl` template is used, or the MIME body, if the `-html.ftl` template is used. If you provide both templates then the email will contain both a text body and a MIME body. It is usually best to provide both versions of your emails for usability reasons.

=== Email Processing ===

In addition to configuring how FreeMarker should process the templates, the `FreeMarkerEmailService` can also automatically set the email's from, from-display, to, bcc, and cc for you by getting configuration data from [GuideConfiguration JCatapult Configuration] files.  It accomplishes this by pulling configuration data using the template-name as follows:

  * jcatapult.email.'template-name'.subject
  * jcatapult.email.'template-name'.from
  * jcatapult.email.'template-name'.from-display
  * jcatapult.email.'template-name'.to
  * jcatapult.email.'template-name'.cc
  * jcatapult.email.'template-name'.bcc

For instance, if my template-name is 'contact', the service will look for the from, from-display, to, cc, and bcc by trying to load the following from the configuration files:

  * jcatapult.email.contact.subject
  * jcatapult.email.contact.from
  * jcatapult.email.contact.from-display
  * jcatapult.email.contact.to
  * jcatapult.email.contact.cc
  * jcatapult.email.contact.bcc

The configuration xml would look as follows:

{{{
<config>
  <jcatapult>
    <email>
      <contact>
        <subject>Contact</subject>
        <from>jane@doe.com</from>
        <from-display>Jane Doe</from-display>
        <to>joe@doe.com</to>
      </contact>
    </email>
  </jcatapult>
</config>
}}}

= Full Example =

To sum up the `FreeMarkerEmailService`, lets pretend that your website has a *contact us* form and when a user fills out this form it should send an email to john@doe.com.

== Template Location ==

The first thing you'll want to do is decide where you want to store your template files.  For this example, lets pretend that you don't like the default location `WEB-INF/email` and you want to change it to `WEB-INF/email-templates`.  As illustrated above, you'd change this by specifying a new template location in the configuration files as follows:

{{{
<config>
  <jcatapult>
    <email>
      <templates>
        <location>/WEB-INF/email-templates</location>
      </templates>
    </email>
  </jcatapult>
</config>
}}}

== Template Name ==

The next thing you'll want to do is come up with a name for your email template.  Since this email will contain details on who submitted the contact form, lets choose 'contact' as the template name.

== Creating Template Files ==

After you decide on a template name, the next thing you must do is construct your email body and decide whether or not you want it to be a text or html email or both types. Let's send an html email with the following body:

{{{
<html>
  <body>
    <p>The website contact us form has been submitted with the following information:</p>
    <ul>
      <li>Name: ${name}</li>
      <li>Email: ${email}</li>
      <li>Message: ${message}</li>
    </ul>
  </body>
</html>
}}}

Since we've chosen `contact` as our template name and we're sending an HTML email, we'll create the following template file containing the above HTML in the WEB-INF/email-templates directory:

{{{
contact-html.ftl
}}}

== Sending the email ==

Using the `FreeMarkerEmailService`, you would send the email by calling the `sendEmail` method, issuing the appropriate commands to build the email. Below is an example JCatapult action that performs this operation:

{{{
// Imports left out for simplicity

/**
 * Example action that processes the contact us form
 */
@Action
public class Test {
    public String name;
    public String email;
    public String message;
    public EmailService emailService;

    @Inject
    public Test(EmailService emailService) {
        this.emailService = emailService;
    }

    public String execute() {
        emailService.sendEmail("contact").
                     withSubject("Contact Us Form Submission").
                     to("john@doe.com").
                     from(email).
                     withTemplateParam("name", name).
                     withTemplateParam("email", email).
                     withTemplateParam("message", message).
                     now();

        return "success";
    }
}
}}}

= Email Transport Service =

The `EmailTransportService` is an interface that defines a transport mechanism for sending email messages. The `FreeMarkerEmailService` that we covered above uses this interface to send the email after is has been constructed. This API consists of one method, `sendEmail`. The javadoc has been included below for illustration:

{{{
    /**
     * Sends an email using some SMTP transport mechanism. An implementation might decide to make the
     * sending be asynchronous or it might choose to send the email immediately. If it decides to send
     * the email immediately, this method will return null.
     *
     * @param   email The email to send.
     * @return  A Future for implementations that send email asynchronously.
     */
    Future<Email> sendEmail(Email email);
}}}

== Java Mail Email Transport Service ==

As suggested by the name, the `JavaMailEmailTransportService` is an implementation of the `EmailTransportService` that uses [http://java.sun.com/products/javamail/ JavaMail] as the SMTP transport mechansism.

=== Configuration ===

The `JavaMailEmailTransportService` uses [GuideConfiguration JCatapult Configuration] for configuring the [http://java.sun.com/products/javamail/ JavaMail] Session.  In order to create the session, the configuration is used to load up the username and password for the SMTP server as well as any other possible JavaMail configuration. Here are the configuration keys that can be used.

  * jcatapult.email.username
    * Description: The user name for the SMTP server
    * Optional: false
    * Default: N/A

  * jcatapult.email.password
    * Description: The password for the SMTP server.
    * Optional: false
    * Default: N/A

  * jcatapult.email.smtp-host
    * Description: The SMTP host.
    * Optional: true
    * Default: localhost

  * jcatapult.email.thread-pool.core-size
    * Description: The initial size of the thread pool for asynchronous handling of the email sending.
    * Optional: true
    * Default: 1

  * jcatapult.email.thread-pool.maximum-size
    * Description: The maximum size of the thread pool for asynchronous handling of the email sending.
    * Optional: true
    * Default: 5

  * jcatapult.email.thread-pool.keep-alive
    * The keep alive time (in milliseconds) to have threads stick around being idle prior to being thrown out.
    * Optional: true
    * Default: 500 milliseconds

Besides the above properties, you can also specify any other properties that are supported by the JavaMail specification. However, these properties need to be prepended with `mail` in order to be loaded. For example, if you want to specify a default 'from' address, you would add a property to the configuration files like this:

{{{
<config>
  <jcatapult>
    <email>
      <mail>
        <from>fred@example.com</from>
      </mail>
    </email>
  </jcatapult>
</config>
}}}