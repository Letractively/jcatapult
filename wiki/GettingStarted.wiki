#summary Getting start using JCatapult

= Introduction =

This document describes how to get up and running with JCatapult.

= Download Current Distribution =
Download the most current version of the JCatapult Distribution from the [downloads Downloads] page.

= JCatapult Ant =

JCatapult requires that you are using Apache Ant 1.7.0 or later. You will need to download Apache Ant if you don't already have it installed. The website for Ant is http://ant.apache.org.

You first need to install the JCatapult Ant build system. To do this you'll need to check out that module from the SubVersion repository into your Apache Ant installation. This procedure will change once the JCatapult Ant build system has produced a release.

{{{
cd $ANT_HOME
svn co http://jcatapult.googlecode.com/svn/jcatapult-ant/trunk/plugins plugins-jcatapult
}}}

Next, check out the JCatapult Ant build tools, which provide easy ways to bootstrap new JCatapult applications, libraries and components.

{{{
cd $ANT_HOME
svn co http://jcatapult.googlecode.com/svn/jcatapult-ant/trunk/tools tools-jcatapult
}}}

= Tomcat =

== Installation ==
Currently, JCatapult requires the use of Tomcat 5.5 or later for running applications in development. This will change in the future to support Jetty and many other application servers. For now, you will need to download Apache Tomcat from http://tomcat.apache.org. Tomcat requires that you configure the CATALINA_HOME environment variable to point to the Tomcat installation directory and this must also be set to use JCatapult.

*NOTE FOR WINDOWS USERS:* JCatapult requires that you install Tomcat using the non-service based installation. Running Tomcat as a Windows service will not work with JCatapult. You must use the ZIP file installation of Tomcat to work with JCatapult.

== SSL Configuration ==
jCatapult assumes your webapp will require the use of SSL and as a result sets the 8443 connector by default in the jCatault Ant Tomcat-plugin server.xml file.  You must run the java keytool app in your user home to create the .keystore file if you haven't yet done so.  Refer to the tomcat [http://tomcat.apache.org/tomcat-5.5-doc/ssl-howto.html SSL Configuration HOW-TO] to create your .keystore file successfully.

If your webapp does not require an SSL connection, then you can override the default server.xml by providing your own in your project without the 8443 connector and implementing the tomcat plugin's deploy_local_post macrodef inside your project's build.xml.  An example implementation has been provided below and assumes you will be overriding the default server.xml with one in your project located at deploy/tomcat/main/conf/server.xml

{{{
<macrodef name="deploy_local_post">
    <sequential>
      <copy file="deploy/tomcat/main/conf/server.xml" todir="${dir.target.tomcat}/conf" overwrite="true"/>
    </sequential>
</macrodef>
}}}

Make sure you provide this implementation after the tomcat plugin import.


= MySQL = 

== Installation ==
Currently, JCatapult requires the use of MySQL for projects that use a database. It's currently in the works to extend this capability to PostgreSQL and more databases will be added soon. For now, you'll need to download and install MySQL Community or Server version 5 or later from http://www.mysql.com.  It's highly recommended that you use InnoDB for all table schemas but jCatpult supports MyISAM as well.

== Setup and Configuration ==
=== Port ===
jCatapult's databasing capabilities currently only work with MySQL's default port setting of 3306.  We recognize that some systems might already have databases configured on this port and, therefore, plan on adding support to configure this setting in the future.
=== Environment ===
It's highly recommended to create an environment variable that references the MySQL home directory and adding the mysql home bin directory to your path.  This is optional and not a requirement for jCatapult to function properly but this will make it much easier for you to run the MySQL client from the command line.

= The build.properties file =
== JDK 1.6 Configuration ==
jCatapult requires a file named build.properties to be created inside your home directory. This file points jCatapult to the location of the JDK for the project. This allows the project to clearly define which JDK it is using (which might be different for other applications) and the JDK used to run the JCatapult Ant build system. This file should contain entries for each of the JDKs you plan to use. Here is an example:

*Linux/Unix version*
{{{
jdk1.6=/usr/lib/jvm/java-6-sun
jdk1.5=/usr/lib/jvm/java-1.5.0-sun
}}}


*Windows version*
{{{
jdk1.6=C:\\Program Files\\Java\\jdk1.6.0_03
jdk1.5=C:\\Program Files\\Java\\jdk1.5.0_12
}}}

By default, jCatapult uses JDK 6 and therefore we suggest downloading, installing and configuring jCatapult to use that JDK.

== Database Credential Configuration ==
In order to successfully create databases for jCatapult projects, jCatapult requires that 2 properties be defined:

  * db.username
  * db.password

Whichever username and password you choose is arbitrary but we recommend that you use the same username as your user home account (using the same username as your home account will make it much easier to access mysql from the shell).

Example:  Lets pretend that your user account is 'userX':

Linux:
{{{
/home/userX
}}}

Mac:
{{{
/Users/userX
}}}

Windows:
{{{
C:\Documents and Settings\userX
}}}

Within your home directory's build.properties file, you'd define db.username and db.password as follows:

{{{
db.username=userX
db.password=
}}}

The last step is to add 'userX' with password empty string to your mysql database (if they do not yet exist).  Use the following mysql documentation to help you with adding your new user credentials to your mysql datbase [http://dev.mysql.com/doc/refman/5.0/en/adding-users.html Adding New User Accounts to MySQL]

NOTE:  You'll notice that no password (empty string) was specified for our example 'userX'.  Inconjunction with setting your username equal to your user home account, providing empty string as your password will expedite accessing the mysql client from the command line.  Once your user is added, you'll only have to type 'mysql' to access your mysql client rather than having to provide both the username and password. 

= Create a project =

jCatapult provides the capability to create 3 different types of jCatapult projects:
  # Web Application
  # Library
  # Component

The jCatapult Ant build system comes standard with a 'make project' tool that uses pre-bundled templates to facilitate the creation of these three types of projects. Below are some basic instructions on how to use the 'make project' tool:

  # Change to the directory you want the application created in (i.e $HOME/dev/jcatapult)
  # Run the make-project tool

You don't need to be in the creation directory, but it reduces the typing required. Here is how to run the make-project tool to access its 'help' screen:

For Unix:
{{{
$ $ANT_HOME/tools-jcatapult/makeproject/make-project help
}}}


For Windows:
{{{
$ %ANT_HOME%\tools-jcatapult\makeproject\make-project.bat help
}}}

Depending on the type of project you are creating, follow the instructions accordingly.  For instance, if you want to create a web application, you'd provide the 'create-webapp' parameter as follows:


For Unix:
{{{
$ $ANT_HOME/tools-jcatapult/makeproject/make-project create-webapp
}}}

For Windows:
{{{
$ %ANT_HOME%\tools-jcatapult\makeproject\make-project create-webapp
}}}

This will ask a series of questions. For now, use these responses:

{{{
    [input] Enter project name
test-webapp
    [input] Enter directory to create the project in or press enter to use the current directory
(hit enter to create it in the current directory)
    [input] Enter package name that the project will use (i.e. com.example.project)
org.jcatapult.example.simple
    [input] Enter the group name for the project (i.e. example.com)
jcatapult.org
}}}

You should now have a JCatapult web application in the current directory named test-webapp. Change into that directory and run the ant build:

{{{
$ ant clean app
}}}

This will build the web application and prepare it to run. Once the build has completed you should be able to run the application using the scripts placed in _target/tomcat/bin_ directory like this:

*Linux/Unix*
{{{
$ target/tomcat/bin/tomcat.sh start
}}}

*Windows*
{{{
> target\tomcat\bin\tomcat.bat start
}}}

Now you should be able to access the newly created application in a browser via http://localhost:8080

= IDE Integration =

All jCatapult projects come default with project and module files for both Eclipse and IntelliJ.  This provides the capability for getting projects up and running quickly in either IDE.  To open the 'test-webapp' project, point either Eclipse or IntelliJ to your 'test-webapp' directory and following opening procedures specific to your IDE.

Additionally, When you add new dependencies to your project.xml, all you have to do is type the following command in your project root to have jCatapult refresh your IDE classpath (This feature comes default in every newly created jCatapult project and, specifically, is an Ant target within the jCatapult Ant IDE plugin.)

{{{
ant ide
}}}

After execution, both Eclipse and IntelliJ should prompt you to refresh your project environment.

To view what other ant targets are available to you by default, type the following command from your project root:

{{{
ant -p
}}} 

= Next =

Next, we'll cover the [ProjectLayout JCatapult project layout].