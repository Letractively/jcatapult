= JCatapult Deployment Manager =

As of 1.0-RC2, JCatapult ships with the JCatapult Deployment Manager (`deployer` for short), which is a deployment framework that uses Apache Commons Configuration, Java Secure CHannel (JSCH), and Groovy to provide an easy way to deploy webapps to remote servers. 

= Setup =

(This document assumes you have completed the instructions in the GettingStarted document.)

The deployer comes with a Linux/Unix/Mac shell script and a Windows batch file that provides the capability to invoke the tool from the command-line. In order to use the tool, the deployer must be correctly installed and the executable must be in your path or must be executed using the fully-qualified location to the executable. The deployer installation is part of the JCatapult distribution and is located in the _JCATAPULT_HOME/deployer_ directory. If you would like to add the deployer to your path, append this to your PATH environment variable:

*Windows*
{{{
%JCATAPULT_HOME%\deployer\bin
}}}

*Linux/Unix*
{{{
$JCATAPULT_HOME/deployer/bin
}}}

= Invoking =

To invoke the deployer, simply type:

{{{
deploy help
}}}

This command will tell the deployer to display the help screen.

Both the batch and shell scripts assume that you are executing them from within your jcatapult project root directory.  If you do not execute them from within your jcatapult project root, then you will be prompted by an error screen informing you of such.

= Configuration =
To configure the deployer, there are 2 main concepts that you should be familiar with:

  * Domain
  * Environment

== Domain ==
The domain represents a server or group of servers where there are one or more environments where you host your web applications from.

== Environment ==
The environment represents a specific location within a domain where your web application is running from.  Each environment is uniquely identified by its name, which is an arbitrary value, however, suggested environment names are:  development, internal-qa, external-qa, staging, production.

Both the Domain and Environment information are configured via an xml file and, by convention, script execution expects the path of this configuration file to be relative to the project root at the following location:

{{{
deploy/remote/deploy.xml
}}}

An example deploy xml configuration file is included below:

{{{
<?xml version="1.0" encoding="UTF-8"?>
<deployment-configuration>
  <domain name="domain1">
    <environment name="internal-qa">
      <host>staging.jcatapult.org</host>
      <host-username>staging.host.username</host-username>
      <host-password>staging.host.password</host-password>
    </environment>
  </domain>
  <domain name="domain2">
    <environment name="external-qa">
      <host>qa.jcatapult.org</host>
      <host-username>qa.host.username</host-username>
      <host-password>qa.host.password</host-password>
    </environment>
    <environment name="staging">
      <host>staging.jcatapult.org</host>
      <host-username>staging.host.username</host-username>
      <host-password>staging.host.password</host-password>
    </environment>
  </domain>
  <domain name="domain3">
    <environment name="production">
      <host>production.jcatapult.org</host>
      <host-username>production.host.username</host-username>
      <host-password>production.host.password</host-password>
    </environment>
  </domain>
</deployment-configuration>
}}}

The deployment configuration schema is defined by one or more `domain` descriptors and each domain descriptor contains one or more `environment` descriptors.  The domain attribute 'name', environment attribute 'name', host, host-username, and host-password descriptors are all required fields.  The xml is validated so if you forget to define any of these fields the tool will notify you of such.

= Interactive =
The deployer tool is highly interactive in that it provides tab completion for ease of use.  Whenever you are asked a question by the deployer you can usually hit the tab key twice to get possible options.  The deployer will prompt 3 questions to collect the following data:

  * Domain
  * Environment
  * Jar 

== Domain ==
The first question the deployer will ask is which domain you are deploying to.  These values are taken directly from the xml configuration file.  If only one domain is defined, then the deployer selects this as the default option.

== Environment ==
Once you select your domain, you will be asked for which environment within that domain you wish to deploy to.  The environment options are taken directly from the xml configuration file.  If only one environment is defined, then the deployer selects this as the default option.

== Jar ==
The next question prompts for the jar resource you'd like to deploy to the selected domain environment. By convention, the deployer looks within the `.jcatapult/deploy-archive` directory for available jar resources.

=== Jar Naming Convention ===
Each jar resource must conform to the following naming convention format in order for the deployer to load them successfully:

{{{
<project-name>-<version>.jar
}}}

  * <project-name> - The deployer extracts this information from the project element `name` attribute within your project's project.xml.
  * <version> - Any version that follows the [GuideVersioning JCatatpult Versioning] specification.

Example:
Lets say, for instance, you wish to deploy your webapp project named 'jcatapult' and the version of your project is 1.0.  The jar resource name would be:

{{{
jcatapult-1.0.jar
}}}

=== Jar Creation ===
A deployable jar resource contains all files that should be deployed to the selected domain enviroment.  The jar file itself can be created manually or created via the JCatapult Release scripts.  For more information on how to create it using the JCatapult Release scripts, please reference the [GuideRelease JCatapult Release] guide.

= Deployment =
Once the deployer collects the domain, environment, and jar resource information it looks for a `deployer.groovy` script in the .jcatapult/deployment/<domain> directory where the <domain> is equal to the domain you are deploying to.

== deployer.goovy ==
The deployer.groovy script must extend the `Deployer` interface and implement the `deploy` method.  The javadoc for the Deploy interface has been provided below:

{{{
package org.jcatapult.deployment;

import org.jcatapult.deployment.domain.DeploymentInfo;

/**
 * Interface for perfoming deployments
 *
 * This interface must be implemented by a deploy.groovy script
 * located in the following directory context:
 *
 * .jcatapult/deployment/<domain>
 *
 * where <domain> is equal to the domain you are deploying to.
 * This domain is the same domain configured in the deploy xml configuration file
 *
 * User: jhumphrey
 * Date: May 15, 2008
 */
public interface Deployer {

    /**
     * Called to deploy
     *
     * @param deploymentInfo {@link DeploymentInfo} provided to groovy scripts.  This bean contains all the necessary information
     * for deploying artifacts to remote servers
     */
    public void deploy(DeploymentInfo deploymentInfo);
}

}}}

== Deployment Info ==
The `DeploymentInfo` object passed to the `deploy` method contains information the deploy.groovy can use to successfully deploy the jar resource to the domain environment specified.