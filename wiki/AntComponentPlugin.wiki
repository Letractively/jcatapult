#summary The JCatapult Ant component plugin

= Introduction =

This plugin provides applications with the ability to integrate components into an existing web application. In addition, this plugin provides scripts and targets for developing new components.

= Files =

Web applications should import this file if they ever need to integrate components (this import statement is included with web applications that are built using the JCatapult _create-webapp_ tool).

{{{
<import file="${ant.home}/plugins-jcatapult/component/1.0/project-support.xml"/>
}}}

Component projects must import these files (these import statements are included with components that are built using the JCatapult _create-component_ tool).

{{{
<import file="${ant.home}/plugins-jcatapult/component/1.0/clean.xml"/>
<import file="${ant.home}/plugins-jcatapult/component/1.0/component.xml"/>
}}}

= Web application targets =

The plugin provides these targets for web applications:

== add-component ==

This target adds a component to a project by asking for the URL within a Savant repository. This URL is the directory that contains the component artifacts for all versions of the component. This URL is used, instead of a direct URL to the artifact, so that the latest version of the component can be added to the project.

= Component project targets =

The plugin provides these targets for component projects:

== clean ==

This target cleans up the components target directory. Since components store their web resources in src/web/main rather than /web, JCatapult creates symbolic links during the build so that modifications to web resources can be modified and reloaded without a copying step.

== jar ==

This process creates the JAR file for the component. Components have special requirements in order to function properly with the JCatapult Migrator tool and for the JUnit tests to work properly when components define JPA entity classes. This target produces 3 JAR files:

|| *component.jar* || Contains the compiled classes for the component and any configuration. ||
|| *component-src.jar* || Contains the components source files for IDE to use. ||
|| *component-test.jar* || Contains a generated persistence.xml JPA configuration file used for unit testing and running the component in a development application. ||

== app ==

This target creates a local web application that contains the component so that it can be tested. This process is somewhat complex, but here is an overview of the steps that are taken:

  # Call the component _jar_ target to create all the JAR files for the component.
  # Constructs a web application in the _target/web_ directory. This web application is based on the _webapp-template_ directory that is part of the JCatapult tools directory that was step as part of JCatapult Ant.
  # Copies the component JAR files to the _target/web/WEB-INF/lib_ directory.
  # Copies the test configuration to the _target/web/WEB-INF/classes_ directory.
  # Creates a symlink from the _src/web/main_ directory to _target/web/WEB-INF/component/${component.name}/content_
  # Creates a symlink from the _src/static/main_ directory to _target/web/component_ directory.
  # Copies all the files from the _src/web/test_ directory into the _target/web_ directory.