<?xml version="1.0" encoding="UTF-8"?>

<!--
   Copyright (c) 2001-2007, JCatapult.org, All Rights Reserved

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
   either express or implied. See the License for the specific
   language governing permissions and limitations under the License.
-->
<project name="module-macros">
  <dirname property="dir.plugin.module" file="${ant.file.module-macros}"/>
  <path id="classpath.module">
    <fileset dir="${dir.plugin.module}/lib" includes="*.jar"/>
    <pathelement location="${dir.plugin.module}/../../libraries/jdom-1.0.jar"/>
  </path>

  <property name="module-macros.dir.scripts.groovy" value="${dir.plugin.module}/scripts/groovy"/>

  <macrodef name="module_project_name">
    <attribute name="url"/>
    <sequential>
      <groovy>
        // First figure out the project name
        def moduleURL = "@{url}";
        if (moduleURL.endsWith("/")) {
          moduleURL = moduleURL.substring(0, moduleURL.length() - 1);
        }
        def moduleProjectName = moduleURL.substring(moduleURL.lastIndexOf("/") + 1);
        properties["module.project.name"] = moduleProjectName;
      </groovy>
      <echo message="Determined module project name to be ${module.project.name}"/>
    </sequential>
  </macrodef>

  <!--
    This determines the version of the module using the url to the module within a Savant repsitory.

    This is making a very large and somewhat annoying assumption to keep me from having to parse out file
    names to determine version numbers. Instead I'm assuming that there is a JAR with the same name as the
    project. So, since the URL points to the Savant project directory I can grab the last part of that String
    and then look for a JAR with the same name and the version on the end.

    For example, if the project name is user-module:

      user-module-1.0-RC1.jar

    I can grab everything after "user-module-" and up to the .jar extension.
  -->
  <macrodef name="module_determine_version">
    <attribute name="url"/>
    <attribute name="name"/>

    <sequential>
      <get src="@{url}" dest="versions.xml"/>
      <groovy>
        <![CDATA[
        import net.java.io.FileTools;
        import net.java.util.Version;

        // Read it in
        def lines = FileTools.read("versions.xml").toString().split("\n");

        // Find the best and then store it in a variable if it was found. If there are no releases
        // this will fail.
        def moduleProjectName = "@{name}";

        def best = null;
        def bestStr = null;
        lines.each {
          def matcher = (it =~ /a href="(.*?)"/)
          if (matcher.find()) {
            def str = matcher[0][1];

            // Ensure that the file name has the module project name in it, and it is the JAR file, and it is not
            // the source JAR file.
            if (str.startsWith(moduleProjectName + "-") && str.endsWith(".jar") && !str.contains("-src")) {

              // Trim off the project name and the .jar extension
              def version = str.substring(moduleProjectName.length() + 1, str.lastIndexOf(".jar"));
              try {
                def ver = new Version(version);
                if (best == null || ver.compareTo(best) > 0) {
                  best = ver;
                  bestStr = version;
                }
              } catch (e) {
                // Smother, this is the .. or something else
              }
            }
          }
        }

        new File("versions.xml").delete();

        if (best != null) {
          properties["module.version"] = bestStr;
          ant.echo("Determined latest module version to be ${bestStr}.");
        } else {
          ant.fail("Module doesn't have any releases yet.");
        }
        ]]>
      </groovy>
    </sequential>
  </macrodef>

  <macrodef name="module_add_dependency">
    <attribute name="name"/>
    <attribute name="version"/>
    <attribute name="url"/>
    <sequential>
      <groovy>
        <classpath>
          <path refid="classpath.module"/>
        </classpath>
        <![CDATA[
        import org.jdom.*;
        import org.jdom.input.SAXBuilder;
        import org.jdom.output.Format;
        import org.jdom.output.XMLOutputter;
        import org.jdom.xpath.XPath;

        // Read it in
        Document doc = new SAXBuilder().build(new File("project.xml"));

        // See if it already has the module
        XPath xpath = XPath.newInstance("//project:artifact[@name='@{name}']");
        xpath.addNamespace("project", "http://www.inversoft.org/schemas/savant-2.0/project");
        Element elem = xpath.selectSingleNode(doc.getRootElement());
        if (elem != null) {
          ant.echo("This project already contains the module @{name}.");
          ant.fail("This project already contains the module @{name}.");
        }

        // Find the artifactGroup element to add the dependency to
        xpath = XPath.newInstance("//project:artifactGroup[@type='compile']");
        xpath.addNamespace("project", "http://www.inversoft.org/schemas/savant-2.0/project");

        elem = xpath.selectSingleNode(doc.getRootElement());
        Element artifact = new Element("artifact", "http://www.inversoft.org/schemas/savant-2.0/project");

        // extract the group from the url
        def moduleURL = "@{url}";
        if (moduleURL.endsWith("/")) {
          moduleURL = moduleURL.substring(0, moduleURL.length() - 1);
        }
        String[] urlTokens = moduleURL.split("/");
        String group = "ADD GROUP";
        if (urlTokens.length - 2 > 0) {
          group = urlTokens[urlTokens.length - 2];
        }

        artifact.setAttribute("group", group);
        artifact.setAttribute("project", "@{name}");
        artifact.setAttribute("name", "@{name}");
        artifact.setAttribute("version", "@{version}");
        artifact.setAttribute("type", "jar");

        // Add the element and some whitespace for formatting
        elem.addContent(new Text("  "));
        elem.addContent(artifact);
        elem.addContent(new Text("\n    "));

        // Write it out
        Format format = Format.getRawFormat();
        format.setLineSeparator("\n");
        XMLOutputter output = new XMLOutputter(format);
        FileOutputStream fos = new FileOutputStream("project.xml");
        output.output(doc, fos);
        fos.close();
        ]]>
      </groovy>
    </sequential>
  </macrodef>

  <macrodef name="module_drop_files">
    <attribute name="url"/>
    <attribute name="name"/>
    <attribute name="version"/>
    <sequential>
      <get src="@{url}/@{name}-files-@{version}.jar" dest="${java.io.tmpdir}/files.jar"/>

      <!-- Extract the static files -->
      <unjar src="${java.io.tmpdir}/files.jar" dest="${dir.web}">
        <patternset>
          <include name="static/**/*"/>
        </patternset>
        <mapper type="glob" from="static/*" to="*"/>
      </unjar>
    </sequential>
  </macrodef>

  <macrodef name="module_add_entities">
    <attribute name="persistenceFile"/>
    <element name="moduleClasspath"/>
    <sequential>
      <property name="tmp_persistence_file" value="@{persistenceFile}"/>
      <groovy>
        <classpath>
          <path refid="classpath.module"/>
          <moduleClasspath/>
        </classpath>
        <![CDATA[
        import org.jdom.*;
        import org.jdom.input.SAXBuilder;
        import org.jdom.output.Format;
        import org.jdom.output.XMLOutputter;

        SAXBuilder builder = new SAXBuilder();
        String persistenceFileName = properties["tmp_persistence_file"];

        // Search in the classloader for all the module.xml files
        Enumeration urls = this.getClass().getClassLoader().getResources("META-INF/module.xml");
        SortedSet set = new TreeSet();
        while (urls.hasMoreElements()) {
          def url = urls.nextElement();

          ant.echo("Adding persistence classes from [${url}] to [${persistenceFileName}]");

          // Read it in
          Document moduleDoc = builder.build(url);
          Element persistenceElem = moduleDoc.getRootElement().getChild("persistence");
          if (persistenceElem == null) {
            ant.echo("Project doesn't define a <persistence> element in the module.xml file. Skipping entity management");
            continue;
          }

          List classElems = persistenceElem.getChildren("class");
          if (classElems == null) {
            ant.echo("Project doesn't define any persistence classes in the module.xml file. Skipping entity management");
            continue;
          }

          classElems.each {classElem ->
            set.add(classElem.getText());
          }
        }

        // Grab the target file and root element
        Namespace ns = Namespace.getNamespace("http://java.sun.com/xml/ns/persistence");
        Document persistenceDoc = builder.build(new File(persistenceFileName));
        Element target = persistenceDoc.getRootElement().getChild("persistence-unit", ns);
        if (target == null) {
          ant.fail("Malformed persistence.xml file [${persistenceFileName}]. No <persistence-unit> element.");
        }

        // Add all the classes to it
        set.each {c ->
          Element newClassElem = new Element("class", ns);
          newClassElem.setText(c);
          target.addContent(2, newClassElem);
        }

        // Write it out
        Format format = Format.getPrettyFormat();
        format.setLineSeparator("\n");
        XMLOutputter output = new XMLOutputter(format);
        FileOutputStream fos = new FileOutputStream(persistenceFileName);
        output.output(persistenceDoc, fos);
        fos.close();
        ]]>
      </groovy>
    </sequential>
  </macrodef>

  <macrodef name="module_create_persistence">
    <attribute name="moduleFile"/>
    <attribute name="persistenceDir"/>
    <sequential>
      <copy todir="@{persistenceDir}" failonerror="yes" overwrite="yes">
        <fileset dir="${dir.plugin.module}/files" includes="**/*"/>
        <filterset>
          <filter token="PROJECT_NAME" value="${underscored.project.name}"/>
        </filterset>
      </copy>
      <dependencypath pathid="classpath.project" workflow="workflow.project"
                      dependencies="dependencies.project"/>
      <module_add_entities persistenceFile="@{persistenceDir}/META-INF/persistence.xml">
        <moduleClasspath>
          <path refid="classpath.project"/>
          <path>
            <fileset dir="${dir.target.jars}" includes="*.jar"/>
          </path>
        </moduleClasspath>
      </module_add_entities>
    </sequential>
  </macrodef>
</project>
