<?xml version="1.0" encoding="UTF-8"?>

<!--
   Copyright (c) 2001-2007, JCatapult.org, All Rights Reserved

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
   either express or implied. See the License for the specific
   language governing permissions and limitations under the License.
-->

<!--
  This build file is quite complex so I'll document it here.

  First off, this overrides the app and jar targets because modules
  have special requirements. These requirements are:

  1. The module needs a web application constructed from scratch
     because it only contains JSPs and classes. It doesn't contain
     the web.xml and all the other web files necessary to run a web
     application in Tomcat.
  2. The module doesn't contain a persistence.xml file. This is
     done so that the modules can define everything in a single
     file called module.xml. If the module had a persistence.xml
     file it could never end up in the classpath, otherwise it might
     override an applications file.

  In order to handle all of this, I create a test only JAR file that
  contains only the persistence.xml file. This test JAR is built using
  a persistence.xml file from this plugin in the files/META-INF directory.
  The JAR is created in the overridden jar target.

  The steps to create the JAR are:

  1. Copy the persistence.xml from this plugin directories files/META-INF
     directory to a tmp dir. This file is token replaced so that the
     JNDI name of the JDBC connection pool is correctly setup for testing.
  2. The entity classes from the module.xml file are appended to
     the persistence.xml file using a macro named module_add_entities
     that is define in the module-macros.xml file.
  3. The test JAR file is then created containing only the persistence.xml
     file that was created.

  This test JAR is then copied into the testing web application when it
  is created. This allows the testing web application to run with the
  correct JPA configuration.
-->
<project name="module">
  <dirname property="dir.plugin.module" file="${ant.file.module}"/>
  <import file="${dir.plugin.module}/module-base.xml"/>
  <import file="${dir.plugin.module}/module-macros.xml"/>

  <property name="dir.webapp.template" value="${env.JCATAPULT_HOME}/ant/tools/makeproject/webapp-template"/>

  <!-- Pseudo-target -->
  <target name="app" description="Builds a test bed for the module"
          depends="jar,-app-local,-app-dependencies,deploy-local"/>

  <target name="-app-local">
    <!-- Create the initial template web application -->
    <mkdir dir="${dir.target.web}"/>

    <!-- Initial layout of project -->
    <copy todir="${dir.target.web}" failonerror="yes" overwrite="yes" encoding="ISO-8859-1">
      <fileset dir="${dir.webapp.template}/web" includes="**/*"/>
      <filterset>
        <filter token="DOMAIN_NAME" value="${project.group}"/>
      </filterset>
    </copy>

    <!-- Copy the libraries and configuration -->
    <copy todir="${dir.target.web}/WEB-INF/lib" failonerror="yes" overwrite="yes">
      <fileset dir="${dir.target.jars}" includes="**/*"/>
    </copy>
    <copy todir="${dir.target.web}/WEB-INF/classes" failonerror="yes" overwrite="yes">
      <fileset dir="${dir.src.conf.test.unit}" includes="**/*"/>
    </copy>

    <!-- Copy the content -->
    <mkdir dir="${dir.target.web}/WEB-INF/classes/WEB-INF"/>
    <unlink link="${dir.target.web}/WEB-INF/classes/WEB-INF/content" failonerror="false"/>
    <link link="${dir.target.web}/WEB-INF/classes/WEB-INF/content" resource="${basedir}/${dir.src.web.main}"/>

    <!-- Link the static resources -->
    <mkdir dir="${dir.target.web}/module/${project.name}"/>
    <unlink link="${dir.target.web}/module/${project.name}/${project.version}" failonerror="false"/>
    <link link="${dir.target.web}/module/${project.name}/${project.version}" resource="${basedir}/${dir.src.static.main}"/>

    <!-- Finally, overlay any testing stuff from web/test -->
    <copy todir="${dir.target.web}" failonerror="yes" overwrite="yes">
      <fileset dir="${dir.src.web.test}" includes="**/*"/>
    </copy>
  </target>

  <target name="-app-dependencies">
    <artifactcopy todir="${dir.target.web}/WEB-INF/lib" flatten="true" types="compile,run"
        workflow="workflow.project" dependencies="dependencies.project"/>
  </target>

  <target name="copy-test-files" description="Copies the files from src/web/test into the target directory without a full build">
    <copy todir="${dir.target.web}" failonerror="yes" overwrite="yes">
      <fileset dir="${dir.src.web.test}" includes="**/*"/>
    </copy>
  </target>
</project>
