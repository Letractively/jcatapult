<!--
  Copyright (c) 2001-2007, Inversoft, All Rights Reserved

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
  either express or implied. See the License for the specific
  language governing permissions and limitations under the License.
  -->
<project name="deploy" basedir=".">

	<target name="-deploy-init">
		<property name="jcatapult.deploy.dir" location="${jcatapult.home}/plugins/deploy/1.0"/>
		<property file="${jcatapult.deploy.dir}/evolution-defaults.properties"/>
		<if>
			<not><isset property="deploy.environment"/></not>
			<then>
				<property name="deploy.environment" value="${default.deploy.environment}"/>
			</then>
		</if>
		
		<set_environment env="${deploy.environment}"/>
		<echo>Deploy: ${deploy.environment}</echo>
		
		
		<if>
			<not><isset property="deploy.version"/></not>
			<then>
				<input message="What version? " addproperty="deploy.version" />
			</then>
		</if>

    	<property name="deploy.archive" location="${dir.deploy.archive}/${project.name}-${deploy.version}.tar.gz"/>
		<if>
			<not><available file="${deploy.archive}"/></not>
			<then><fail>The archive for this build does not exist: ${deploy.archive}</fail></then>
		</if>
	</target>
	
	<target name="deploy" depends="-deploy-init" description="Deploys the web application to the server">

		<antcall target="deploy-tar"/>
	</target>
	
	<target name="deploy-rsync" depends="-deploy-init" description="Deploys using Rsync to update the site.  Requires installation of SSH &amp; Rsync">
		<property name="deploy.mode" value="rsync"/>
		<echo>Deploying using RSYNC method</echo>

		<echo>Setting up directory on the server</echo>
		<property name="deploy.rsync_setup" value="cd ${deploy.dir.work}; if [ ! -d CURRENT ] ; then echo 'CURRENT directory Missing' ; exit 1; fi; mkdir ${deploy.version}; cp -R CURRENT/* ${deploy.version}/"/>  
		<sshexec host="${deploy.server.host}" username="${deploy.server.username}"
			password="${deploy.server.password}" trust="true" failonerror="true"
			command="if [ ! -d ${deploy.dir.work} ] ; then mkdir ${deploy.dir.work} ; fi ; ${deploy.rsync_setup}"/>
		
		<echo>Expanding archive for rsync</echo>
		<tempfile property="deploy.tempdir" deleteonexit="true" destdir="${dir.jcatapult}"/>
		<mkdir dir="${deploy.tempdir}"/>
		<untar dest="${deploy.tempdir}" src="${deploy.archive}" compression="gzip"/>

		<property name="deploy.rsync_target" value="${deploy.server.username}@${deploy.server.host}:${deploy.dir.work}/${deploy.version}"/>
		<echo>RSync from ${deploy.tempdir} to ${deploy.rsync_target}</echo>
		<exec executable="rsync" failonerror="true">
			<arg value="-aicqz"/>
			<arg value="--delete"/>
			<arg file="${deploy.tempdir}/web"/>
			<arg file="${deploy.tempdir}/db"/>
			<!-- arg file="${deploy.tempdir}/files"/ -->
			
			<arg value="${deploy.rsync_target}"/>
		</exec>
				
		<antcall target="deploy-run-script"/>
		
	</target>
	
	<target name="deploy-tar" depends="-deploy-init" description="Deploys using a tar file">
		<property name="deploy.mode" value="tar"/>
		
		<echo>Deploying using Tar method</echo>
		<sshexec host="${deploy.server.host}" username="${deploy.server.username}"
			password="${deploy.server.password}" trust="true"
			command="if [ ! -d ${deploy.dir.work} ] ; then mkdir ${deploy.dir.work} ; fi "/>
		
		<echo>Sending TAR file</echo>
		<scp file="${deploy.archive}" 
			todir="${deploy.server.username}@${deploy.server.host}:${deploy.dir.work}"
			password="${deploy.server.password}"/>
		
		<antcall target="deploy-run-script"/>
	</target>
	
	<target name="deploy-run-script" depends="-deploy-init">
		<copy file="${jcatapult.deploy.dir}/files/deploy.sh" tofile="${dir.target}/deploy.sh">
			<filterset>
				<filter token="project.name" value="${project.name}"/>
				<filter token="deploy.dir.files" value="${deploy.dir.files}"/>
				<filter token="deploy.dir.work" value="${deploy.dir.work}"/>
				<filter token="deploy.dir.deploy" value="${deploy.dir.deploy}"/>
				<filter token="deploy.cmd.stop" value="${deploy.cmd.stop}"/>
				<filter token="deploy.cmd.start" value="${deploy.cmd.start}"/>
				<filter token="deploy.environment" value="${deploy.environment}"/>
				<filter token="deploy.db.host" value="${deploy.db.host}"/>
				<filter token="deploy.db.port" value="${deploy.db.port}"/>
				<filter token="deploy.db.username" value="${deploy.db.username}"/>
				<filter token="deploy.db.password" value="${deploy.db.password}"/>
				<filter token="deploy.db.database" value="${deploy.db.database}"/>
			</filterset>
		</copy>
		
		<echo>Sending deploy script</echo>
		<scp file="${dir.target}/deploy.sh" 
			todir="${deploy.server.username}@${deploy.server.host}:${deploy.dir.work}"
			password="${deploy.server.password}"/>


		<echo>Executing Deploy Script</echo>
		<sshexec host="${deploy.server.host}" username="${deploy.server.username}"
			password="${deploy.server.password}" trust="true"
			failonerror="true"
			command="cd ${deploy.dir.work}; chmod u+x deploy.sh; ./deploy.sh '${deploy.version}'  '${deploy.mode}' '${project.name}-${deploy.version}.tar.gz' "/>
	</target>
	
	<!-- Sets up the environment given the deploy.environment property -->
	<macrodef name="set_environment">
		<attribute name="env" />
		<sequential>
			<!-- set the variables that  probably have defaults -->
			<deploy_set_env_var_default env="@{env}" var="deploy.dir.files"/>
			<deploy_set_env_var_default env="@{env}" var="deploy.dir.work"/>
			<deploy_set_env_var_default env="@{env}" var="deploy.dir.deploy"/>
			<deploy_set_env_var_default env="@{env}" var="deploy.cmd.stop"/>
			<deploy_set_env_var_default env="@{env}" var="deploy.cmd.start"/>
			
			<deploy_set_env_var env="@{env}" var="deploy.db.host"/>
			<deploy_set_env_var env="@{env}" var="deploy.db.port"/>
			<deploy_set_env_var env="@{env}" var="deploy.db.username"/>
			<deploy_set_env_var env="@{env}" var="deploy.db.password"/>
			<deploy_set_env_var env="@{env}" var="deploy.db.database"/>
			
			<deploy_set_env_var env="@{env}" var="deploy.server.host"/>
			<deploy_set_env_var env="@{env}" var="deploy.server.username"/>
			<deploy_set_env_var env="@{env}" var="deploy.server.password"/>
			
		</sequential>		
	</macrodef>

	<macrodef name="deploy_set_env_var_default">
		<attribute name="env" />
		<attribute name="var" />
		<sequential>
			<if>
				<isset property="@{env}.@{var}"/>
				<then><property name="@{var}" value="${@{env}.@{var}}"/></then>
				<else><property name="@{var}" value="${default.@{var}}"/></else>
			</if>
		</sequential>
	</macrodef>
	
	<macrodef name="deploy_set_env_var">
		<attribute name="env" />
		<attribute name="var" />
		<sequential>
			<if>
				<isset property="@{env}.@{var}"/>
				<then><property name="@{var}" value="${@{env}.@{var}}"/></then>
				<else><fail>You must define @{env}.@{var}</fail></else>
			</if>
		</sequential>
	</macrodef>
	
</project>