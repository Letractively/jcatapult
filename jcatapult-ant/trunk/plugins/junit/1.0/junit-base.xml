<?xml version="1.0" encoding="UTF-8"?>

<!--
   Copyright (c) 2001-2007, Inversoft, All Rights Reserved

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
   either express or implied. See the License for the specific
   language governing permissions and limitations under the License.
-->
<project name="junit-base">

  <property name="haltonfailure" value="true" description="Whether a junit failure should cause the script to halt."/>

  <path id="classpath.test.default">
    <path refid="classpath.run.test"/>
    <path location="${dir.target}/classes/instrumented"/>
    <path>
      <fileset dir="${dir.target.jars}" includes="*.jar"/>
    </path>
    <path location="${dir.target.classes.test.unit}"/>
    <path location="${dir.target.classes.test.integration}"/>
  </path>

  <!-- initializes -D params -->
  <target name="-test-init-params">
    <if>
      <isset property="ignore.tests"/>
      <then>
        <if>
          <equals arg1="${ignore.tests}" arg2="true"/>
          <then>
            <echo>Ignoring unit testing!</echo>
          </then>
        </if>
      </then>
      <else>
        <property name="ignore.tests" value="false"/>
      </else>
    </if>

    <if>
      <isset property="test"/>
      <then>
        <echo message="Testing single unit test only [${test}Test.class] (-Dtest=${test})"/>
      </then>
    </if>
  </target>

  <!-- runs unit tests -->
  <target name="test"
          description="Runs unit and integration tests.  This target ignores testing if -Dignore.test=true.">
    <test-pre/>
    <antcall target="test-unit"/>
    <antcall target="test-integration"/>
    <test-post/>
  </target>

  <!-- target for running unit tests -->
  <target name="test-unit"
          description="Runs the unit tests.  Specify '-Dtest=Foo' to run a single unit test only.  This target ignores testing if -Dignore.test=true."
          depends="-test-init-params,clean,jar,-test-init">
    <test-unit-pre/>
    <echo>Executing unit tests...</echo>
    <test-script type="unit"/>
    <test-unit-post/>
  </target>

  <!-- target for running integration tests -->
  <target name="test-integration"
          description="Runs the integration tests.  Specify '-Dtest=Foo' to run a single integration test only.  This target ignores testing if -Dignore.test=true."
          depends="-test-init-params,clean,jar,-test-init">
    <test-integration-pre/>
    <echo>Executing integration tests...</echo>
    <test-script type="integration"/>
    <test-integration-post/>
  </target>

  <!-- test script -->
  <macrodef name="test-script">
    <attribute name="type"/>
    <sequential>
      <if>
        <equals arg1="${ignore.tests}" arg2="true"/>
        <then>
          <echo>Ignoring execution of unit tests (-Dignore.tests=true)</echo>
        </then>
        <else>
          <if>
            <isset property="test"/>
            <then>
              <test-run include="**/${test}*Test.class" jdk="${jdk.project}" dir="${dir.target.classes.test.@{type}}" conf="${dir.src.conf.test.@{type}}">
                <testclasspath>
                  <path refid="classpath.test.default"/>
                </testclasspath>
              </test-run>
            </then>
            <else>
              <test-run include="**/*Test.class" jdk="${jdk.project}" dir="${dir.target.classes.test.@{type}}" conf="${dir.src.conf.test.@{type}}">
                <testclasspath>
                  <path refid="classpath.test.default"/>
                </testclasspath>
              </test-run>
            </else>
          </if>
        </else>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="test-run">
    <attribute name="include"/>
    <attribute name="jdk"/>
    <attribute name="dir"/>
    <attribute name="conf"/>
    <element name="testclasspath"/>
    <sequential>
      <!-- Grab the dependencies that the project needs to run the tests -->
      <dependencypath pathid="classpath.run.test" types="compile-only,compile,run,test-compile,test-run"
                      includedependencies="true" workflow="workflow.project" dependencies="dependencies.project"/>

      <mkdir dir="${dir.target.report}"/>
      <!-- Run the tests -->
      <junit jvm="@{jdk}/bin/java" printsummary="withOutAndErr" fork="yes" haltonfailure="${haltonfailure}" showoutput="yes">
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="-ea"/>
        <jvmarg value="-Djava.util.logging.config.file=@{conf}/logging.properties"/>
        <classpath>
          <testclasspath/>
          <path location="tmp"/>
        </classpath>
        <formatter type="plain" usefile="false"/>
      	<formatter type="xml"/>
        <batchtest todir="${dir.target.report}">
          <fileset dir="@{dir}">
            <include name="@{include}"/>
          </fileset>
        </batchtest>
      </junit>
    </sequential>
  </macrodef>

  <!-- Pre process for overriding -->
  <macrodef name="test-pre">
    <sequential>
    </sequential>
  </macrodef>

  <!-- Pre process for overriding -->
  <macrodef name="test-unit-pre">
    <sequential>
    </sequential>
  </macrodef>

  <macrodef name="test-integration-pre">
    <sequential>
    </sequential>
  </macrodef>

  <!-- post process for overriding -->
  <macrodef name="test-post">
    <sequential>
    </sequential>
  </macrodef>

  <!-- Post process for overriding -->
  <macrodef name="test-unit-post">
    <sequential>
    </sequential>
  </macrodef>

  <!-- post process for overriding -->
  <macrodef name="test-integration-post">
    <sequential>
    </sequential>
  </macrodef>
</project>
