<?xml version="1.0" encoding="UTF-8"?>

<!--
   Copyright (c) 2001-2007, Inversoft, All Rights Reserved

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
   either express or implied. See the License for the specific
   language governing permissions and limitations under the License.
-->

<!--
  This build file is quite complex so I'll document it here.

  First off, this overrides the app and jar targets because components
  have special requirements. These requirements are:

  1. The component needs a web application constructed from scratch
     because it only contains JSPs and classes. It doesn't contain
     the web.xml and all the other web files necessary to run a web
     application in Tomcat.
  2. The component doesn't contain a persistence.xml file. This is
     done so that the components can define everything in a single
     file called component.xml. If the component had a persistence.xml
     file it could never end up in the classpath, otherwise it might
     override an applications file.

  In order to handle all of this, I create a test only JAR file that
  contains only the persistence.xml file. This test JAR is built using
  a persistence.xml file from this plugin in the files/META-INF directory.
  The JAR is created in the overridden jar target.

  The steps to create the JAR are:

  1. Copy the persistence.xml from this plugin directories files/META-INF
     directory to a tmp dir. This file is token replaced so that the
     JNDI name of the JDBC connection pool is correctly setup for testing.
  2. The entity classes from the component.xml file are appended to
     the persistence.xml file using a macro named component_add_entities
     that is define in the component-macros.xml file.
  3. The test JAR file is then created containing only the persistence.xml
     file that was created.

  This test JAR is then copied into the testing web application when it
  is created. This allows the testing web application to run with the
  correct JPA configuration.
-->
<project name="component-base">
  <dirname property="dir.plugin.component-base" file="${ant.file.component-base}"/>
  <import file="${dir.plugin.component-base}/component-macros.xml"/>

  <!-- Override the JAR target because we need to create the files JAR and copy the src/db files over to META-INF -->
  <target name="-jar-init">
    <mkdir dir="${dir.target.jars}"/>
  </target>

  <target name="jar" depends="compile,-jar-init" description="Creates the project JAR files.">

    <!-- copy src/db/main sql files into META-INF/sql -->
    <property name="dir.target.sql.main" value="${dir.target.classes.main}/META-INF/sql"/>
    <mkdir dir="${dir.target.sql.main}"/>
    <copy todir="${dir.target.sql.main}" failonerror="false">
      <fileset dir="${dir.src.db.main}" includes="**/*"/>
    </copy>

    <!-- Copy the freemarker templates to the correct locations -->
    <copy todir="${dir.target.classes.main}/WEB-INF/component/${component.name}/content" failonerror="false">
      <fileset dir="${dir.src.web.main}" includes="**/*"/>
    </copy>

    <!-- Copy the static files into the struts location -->
    <copy todir="${dir.target.classes.main}/component" failonerror="false">
      <fileset dir="${dir.src.static.main}" includes="**/*"/>
    </copy>

    <jar destfile="${dir.target.jars}/${project.name}-${project.version}.jar">
      <fileset dir="${dir.target.classes.main}" includes="**/*"/>
    </jar>

    <!-- delete the META-INF/sql directory.  This is deleted so that these files are not found by the
          jcatapult database migration api -->
    <delete dir="${dir.target.sql.main}"/>

    <!-- Source JAR -->
    <jar destfile="${dir.target.jars}/${project.name}-${project.version}-src.jar">
      <fileset dir="${dir.src.java.main}" includes="**/*"/>
    </jar>

    <!-- Special test only JAR with the persistence.xml -->
    <component_create_persistence componentFile="${dir.src.conf.main}/component.xml"
                                  persistenceDir="${dir.target}"/>
    <jar destfile="${dir.target.jars}/${project.name}-test-${project.version}.jar">
      <fileset dir="${dir.target}" includes="META-INF/**/*"/>
    </jar>
    <delete dir="${java.target}/META-INF"/>

     <!--Publish everything except the special test JAR-->
    <publish publishWorkflow="workflow.publish.local"/>
    <echo message="Done"/>
  </target>
</project>
