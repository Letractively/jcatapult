<!--
  This is a stand alone build file and can be called from
  anywhere using the -f option like this:

  ant -f /foo/bar/ant/plugins/project-0.1/build.xml

  You can also change into this plugins directory and execute
  ant from there.
-->
<project name="makeproject">
  <dirname property="dir.plugin.makeproject" file="${ant.file.makeproject}"/>

  <property name="plugin.dir" value="${ant.home}/plugins-jcatapult"/>

  <path id="classpath.makeproject">
    <fileset dir="${dir.plugin.makeproject}/lib" includes="*.jar"/>
    <pathelement location="${plugin.dir}/libraries/groovy-all-1.5.2.jar"/>
    <pathelement location="${plugin.dir}/libraries/java-net-commons-1.3.13.jar"/>
    <pathelement location="${plugin.dir}/libraries/ant-contrib-1.0b2.jar"/>
  </path>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="classpath.makeproject"/>
  <typedef resource="org/jcatapult/ant/jcatapult.properties" classpathref="classpath.makeproject"/>
  <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="classpath.makeproject"/>

  <property file="${user.home}/build.properties"/>

  <import file="${plugin.dir}/svn/1.0/svn-macros.xml"/>

  <!--
    Gets all the required project information
  -->
  <target name="-init">
    <input message="Enter project name" addproperty="create.project.name"/>
    <input message="Enter directory to create the project in (the project name will be appended to this directory)"
           addproperty="create.project.dir" defaultvalue="${user.dir}"/>
    <condition property="bad.project.name">
      <contains string="${create.project.name}" substring="_"/>
    </condition>
    <fail message="Project names cannot contain any _ (underscore) characters" if="bad.project.name"/>

    <!-- Changes dashes to underscores -->
    <groovy>
      String projectName = properties["create.project.name"];
      properties["underscored.project.name"] = projectName.replace("-", "_");
    </groovy>

    <input message="Enter package name that the project will use (i.e. com.example.project)" addproperty="create.package.name"/>

    <!-- Creates a directory from the package name -->
    <groovy>
      String packageDir = properties["create.package.name"];
      properties["dir.package"] = packageDir.replace(".", "/");
    </groovy>

    <input message="Enter the group name for the project (i.e. example.com)" addproperty="create.group.name"/>
  </target>

  <!--
    Creates a library module.
  -->
  <target name="create-library" depends="-init" description="Creates a new library project">
    <create-project template="library-template"/>
  </target>

  <!--
    Creates a webapp module.
  -->
  <target name="create-webapp" depends="-init" description="Creates a new webapp project">
    <create-project template="webapp-template"/>
  </target>

  <!--
    Creates a component module.
  -->
  <target name="create-component" depends="-init" description="Creates a new component project">
    <create-project template="component-template"/>
  </target>

  <target name="svn-import" description="Imports a project into a subversion repository.  This target creates the trunk, tags, and branches directory for you.">
    <input message="Enter project name (e.g. projectX)" addproperty="svn-import.project.name"/>
    <input message="Enter the path to your project (e.g. /home/jdoe/projectX)" addproperty="svn-import.project.path" defaultvalue="${user.dir}"/>
    <input message="Enter the subversion repository url where to import the project (e.g. http://www.johndoe.com/subversion/projects - note the project name will be appended to this)" addproperty="svn-import.url"/>
    <input message="Enter the subversion repository username" addproperty="svn-import.username"/>
    <input message="Enter the subversion repository password" addproperty="svn-import.password"/>

    <property name="import.dir" value="${user.home}/tmp/${svn-import.project.name}"/>

    <echo>Creating local subversion directory structure...</echo>
    <delete dir="${import.dir}"/>
    <mkdir dir="${import.dir}/trunk"/>
    <mkdir dir="${import.dir}/tags"/>
    <mkdir dir="${import.dir}/branches"/>

    <copy todir="${import.dir}/trunk">
        <fileset dir="${svn-import.project.path}" includes="**/*"/>
    </copy>

    <echo>Importing [${import.dir}] to [${svn-import.url}]...</echo>
    <scm_import project="${svn-import.project.name}" dir="${import.dir}" url="${svn-import.url}" username="${svn-import.username}" password="${svn-import.password}"/>

  </target>

  <!--
    Creates the structure and copies the template over, setting up any files
    like IDE files and replacing tokens.
  -->
  <macrodef name="create-project">
    <attribute name="template"/>
    <sequential>
      <delete dir="${create.project.dir}/${create.project.name}"/>
      <mkdir dir="${create.project.dir}/${create.project.name}"/>

      <!-- Source directories -->
      <mkdir dir="${create.project.dir}/${create.project.name}/src/java/main/${dir.package}"/>
      <mkdir dir="${create.project.dir}/${create.project.name}/src/java/test/integration/${dir.package}"/>
      <mkdir dir="${create.project.dir}/${create.project.name}/src/java/test/unit/${dir.package}"/>

      <!-- Figure out the versions of jcatapult-Core -->
      <determine_version url="http://jcatapult.googlecode.com/svn/jcatapult-core/tags/" property="version.jcatapult"/>

      <copy todir="${create.project.dir}/${create.project.name}">
        <fileset dir="${basedir}/@{template}" includes="**/*" excludes="@{template}*"/>
        <filterset>
          <filter token="GROUP_NAME" value="${create.group.name}"/>
          <filter token="PACKAGE_NAME" value="${create.package.name}"/>
          <filter token="PROJECT_NAME" value="${create.project.name}"/>
          <filter token="UNDERSCORED_PROJECT_NAME" value="${underscored.project.name}"/>
          <filter token="JCATAPULT_VERSION" value="${version.jcatapult}"/>
        </filterset>
      </copy>
      <copy todir="${create.project.dir}/${create.project.name}">
        <fileset dir="${basedir}/@{template}" includes="@{template}*" excludes="*.iws"/>
        <mapper type="regexp" from=".*\.(.*)" to="${create.project.name}.\1"/>
      </copy>

      <!-- Replace 'template' with {create.project.name} in IJ files -->
      <replace file="${create.project.dir}/${create.project.name}/${create.project.name}.ipr" token="@{template}"
        value="${create.project.name}"/>
      <replace file="${create.project.dir}/${create.project.name}/${create.project.name}.iml" token="@{template}"
        value="${create.project.name}"/>

      <!-- Generate better iml and classpath IDE files -->
      <ant dir="${create.project.dir}/${create.project.name}" target="ide"/>
    </sequential>
  </macrodef>

  <macrodef name="determine_version">
    <attribute name="url"/>
    <attribute name="property"/>
    <sequential>
      <get src="@{url}" dest="${basedir}/versions.xml"/>
      <groovy>
        <classpath>
          <pathelement location="${plugin.dir}/libraries/java-net-commons-1.3.13.jar"/>
        </classpath>
        import net.java.io.FileTools;
        import net.java.util.Version;

        // Read it in
        def lines = FileTools.read("${properties['basedir']}/versions.xml").toString().split("\n");

        // Find the best and then store it in a variable if it was found. If there are no releases
        // this will fail.
        def best = null;
        def bestStr = null;
        lines.each {
          def matcher = (it =~ /&lt;li>&lt;a href="(.*?)\/"/)
          if (matcher.find()) {
            def str = matcher[0][1];
            try {
              def ver = new Version(str);
              if (best == null || ver.compareTo(best) > 0) {
                best = ver;
                bestStr = str;
              }
            } catch (e) {
              // Smother, this is the .. or something else
            }
          }
        }

        new File(properties["basedir"] + "/versions.xml").delete();

        String moduleName = "@{url}";
        String propName = "@{property}";
        if (best != null) {
          properties[propName] = bestStr;
          ant.echo("Determined latest ${moduleName} version to be ${bestStr}.");
        } else {
          properties[propName] = "1.0-M1-{integration}";
          ant.echo("WARNING: ${moduleName} doesn't have any releases, assuming 1.0-M1-{integration}");
        }
      </groovy>
    </sequential>
  </macrodef>
</project>
